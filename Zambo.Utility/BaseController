using System;
using System.Web;
using System.Web.Mvc;
using Value.Api.Client;

namespace Value.Site.Controllers
{
    public class BaseController:Controller
    {
        private RealEstateClient _realEstateClient;
        public RealEstateClient RealEstateClient
        {
            get
            {
                if (_realEstateClient == null)
                    _realEstateClient = new RealEstateClient();

                return _realEstateClient;
            }
        }

        public int LanguageId
        {
            get
            {
                var languageCookie = GetCookie("Language");
                var newLanguageId = 0;

                if (languageCookie != null)
                {
                    newLanguageId = Convert.ToInt32(languageCookie.Value);
                    SetNewLanguage(newLanguageId);

                    return newLanguageId;
                }

                AddCookie("Language", "2", DateTime.Now.AddDays(365));
                newLanguageId = 2;

                if (GetCookie("Language") == null)
                {
                    if (Session["LanguageId"] == null)
                        Session["LanguageId"] = 2;
                    else
                        newLanguageId = Convert.ToInt32(Session["LanguageId"]);
                }

                SetNewLanguage(newLanguageId);

                return newLanguageId;
            }
            set
            {
                AddCookie("Language", value.ToString(), DateTime.Now.AddDays(365));

                if (GetCookie("Language") == null)
                    Session["LanguageId"] = value;

                SetNewLanguage(value);
            }
        }

        private void SetNewLanguage(int languageId)
        {
            var languageCode = RealEstateClient.GetLanguageCode(languageId);

            var culture = new System.Globalization.CultureInfo(languageCode);

            LanguageResources.Resources.Culture = culture;
        }

        public bool AddCookie(string cookieName, string cookieValue, DateTime expiryDate)
        {
            var newCookie = new HttpCookie(cookieName);
            newCookie.Value = cookieValue;
            newCookie.Expires = expiryDate;

            HttpContext.Response.Cookies.Add(newCookie);

            return true;
        }

        public bool RemoveCookie(string cookieName)
        {
            HttpCookie currentUserCookie = HttpContext.Request.Cookies[cookieName];
            HttpContext.Response.Cookies.Remove(cookieName);
            currentUserCookie.Expires = DateTime.Now.AddDays(-10);
            currentUserCookie.Value = null;
            HttpContext.Response.SetCookie(currentUserCookie);

            return true;
        }

        public bool CookieExists(string cookieName)
        {
            return HttpContext.Request.Cookies[cookieName] != null;
        }

        public HttpCookie GetCookie(string cookieName)
        {
            return HttpContext.Request.Cookies[cookieName];
        }
    }
}
