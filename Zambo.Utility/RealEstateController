using log4net;
using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Linq.Dynamic;
using System.Web.Http;
using WSAsset.Api.Configuration;
using WSAsset.Api.Helpers;
using WSAsset.Api.Interfaces.Response;
using WSAsset.Api.RealEstateEntities;
using WSAsset.Api.RealEstateEntities.Request;
using WSAsset.Api.RealEstateEntities.Response;
using WSAsset.DataModel;

namespace WSAsset.Api.Controllers
{
    public class IncrementClass
    {
        public int AssetId { get; set; }
    }

    [RoutePrefix("RealEstate")]
    public class RealEstateController : BaseApiController// ApiController
    {
        private readonly ILog _log = LogManager.GetLogger(typeof(RealEstateController));

        [HttpPost]
        [Route("GetAssets")]
        public PagedList<RealEstateInformationResponse> GetAssets(RealEstateSearchFilters searchFilters)
        {
            try
            {
                using (var model = new WSAssetModel())
                {
                    var returnList = new PagedList<RealEstateInformationResponse>();

                    var assetQuery = model.Asset.Where(x => x.IsActive).AsQueryable();
                    if (assetQuery.Any())
                    {
                        var realEstateQuery = model.RealEstate.AsQueryable();

                        assetQuery = searchFilters.IsHighlighted.HasValue ? assetQuery.Where(x => x.IsHighlighted == searchFilters.IsHighlighted.Value) : assetQuery;
                        assetQuery = searchFilters.MaxPrice.HasValue ? assetQuery.Where(x => x.CurrentPrice <= searchFilters.MaxPrice.Value) : assetQuery;
                        assetQuery = searchFilters.MinPrice.HasValue ? assetQuery.Where(x => x.CurrentPrice >= searchFilters.MinPrice.Value) : assetQuery;
                        assetQuery = !string.IsNullOrWhiteSpace(searchFilters.Reference) ? assetQuery.Where(x => x.Reference == searchFilters.Reference) : assetQuery;
                        assetQuery = searchFilters.PriceReduced.HasValue ? assetQuery.Where(x => x.PreviousPrice > x.CurrentPrice) : assetQuery;

                        realEstateQuery = searchFilters.HasParking.HasValue ? realEstateQuery.Where(x => x.HasParking == searchFilters.HasParking.Value) : realEstateQuery;
                        realEstateQuery = searchFilters.MinConstructionYear.HasValue ? realEstateQuery.Where(x => x.ConstructionYear >= searchFilters.MinConstructionYear.Value) : realEstateQuery;
                        realEstateQuery = searchFilters.MaxConstructionYear.HasValue ? realEstateQuery.Where(x => x.ConstructionYear <= searchFilters.MaxConstructionYear.Value) : realEstateQuery;

                        realEstateQuery = searchFilters.Parish.HasValue ? realEstateQuery.Where(x => x.ParishID == searchFilters.Parish.Value) : realEstateQuery;
                        realEstateQuery = searchFilters.County.HasValue ? realEstateQuery.Where(x => x.CountyID == searchFilters.County.Value) : realEstateQuery;
                        realEstateQuery = searchFilters.District.HasValue ? realEstateQuery.Where(x => x.DistrictID == searchFilters.District.Value) : realEstateQuery;

                        realEstateQuery = searchFilters.MaxArea.HasValue ? realEstateQuery.Where(x => x.GrossBuildingArea <= searchFilters.MaxArea.Value) : realEstateQuery;
                        realEstateQuery = searchFilters.MinArea.HasValue ? realEstateQuery.Where(x => x.GrossBuildingArea >= searchFilters.MinArea.Value) : realEstateQuery;

                        //realEstateQuery = searchFilters.PropertyStatus.HasValue ? realEstateQuery.Where(x => x.RealEstateStatusID == searchFilters.PropertyStatus.Value) : realEstateQuery;
                        realEstateQuery = searchFilters.MaxTipology.HasValue ? realEstateQuery.Where(x => x.RealEstateTipologyID <= searchFilters.MaxTipology.Value) : realEstateQuery;
                        realEstateQuery = searchFilters.MinTipology.HasValue ? realEstateQuery.Where(x => x.RealEstateTipologyID >= searchFilters.MinTipology.Value) : realEstateQuery;
                        realEstateQuery = searchFilters.PropertyCondition.HasValue ? realEstateQuery.Where(x => x.RealEstateConditionID == searchFilters.PropertyCondition.Value) : realEstateQuery;

                        realEstateQuery = searchFilters.PropertyType.HasValue ? realEstateQuery.Where(x => x.RealEstateTypeID == searchFilters.PropertyType.Value) : realEstateQuery;
                        realEstateQuery = searchFilters.StatusId.HasValue ? realEstateQuery.Where(x => x.RealEstateStatusID == searchFilters.StatusId.Value) : realEstateQuery;

                        var orderField = string.Empty;

                        switch (searchFilters.SortBy)
                        {
                            case SortBy.PriceIncreasing:
                                orderField += "CurrentPrice asc,";
                                break;
                            case SortBy.PriceDecreasing:
                                orderField += "CurrentPrice desc,";
                                break;
                            case SortBy.AreaIncreasing:
                                orderField += "GrossBuildingArea asc,";
                                break;
                            case SortBy.AreaDecreasing:
                                orderField += "GrossBuildingArea desc,";
                                break;
                            case SortBy.MostViewed:
                                orderField += "HitCount desc,";
                                break;
                            default:
                                break;
                        }

                        if (searchFilters.MostRecentOptions.HasValue)
                        {
                            var date = DateTime.Now;
                            switch (searchFilters.MostRecentOptions)
                            {
                                case MostRecentOptions.Last15Days:
                                    date = date.AddDays(-15);
                                    assetQuery = assetQuery.Where(x => x.PublishDate >= date);
                                    break;
                                case MostRecentOptions.Last30Days:
                                    date = date.AddDays(-30);
                                    assetQuery = assetQuery.Where(x => x.PublishDate >= date);
                                    break;
                                case MostRecentOptions.Last2Months:
                                    date = date.AddMonths(-2);
                                    assetQuery = assetQuery.Where(x => x.PublishDate >= date);
                                    break;       
                                default:
                                    break;
                            }
                        }

                        orderField += "PublishedDate desc";

                        IQueryable<RealEstateInformationResponse> mergedResults = GetMergedResults(assetQuery, realEstateQuery, model, searchFilters.LanguageId);

                        if (searchFilters.RandomSort.GetValueOrDefault())
                        {
                            mergedResults = mergedResults.OrderBy(q => Guid.NewGuid());
                        }
                        else
                        {
                            mergedResults = mergedResults.OrderBy(orderField);
                        }

                        var realEstateList = mergedResults.Skip((searchFilters.PageNumber - 1) * searchFilters.PageSize).ToList().Take(searchFilters.PageSize).ToList();

                        returnList = new PagedList<RealEstateInformationResponse>();
                        returnList.Rows = realEstateList;
                        returnList.TotalRows = mergedResults.Count();
                        returnList.PageNumber = searchFilters.PageNumber;
                        returnList.PageSize = searchFilters.PageSize;
                    }
                    return returnList;
                }
            }
            catch (Exception ex)
            {
                _log.ErrorFormat("An Error Occured : {0} - Inner exception - {1}", ex.Message, ex.InnerException);
                throw;
            }
        }

        [HttpPost]
        [Route("GetRealEstatesById")]
        public List<RealEstateInformationResponse> GetRealEstatesById(GetRealEstatesByIdRequest request)
        {
            try
            {
                if (!request.AssetIds.Any())
                    return new List<RealEstateInformationResponse>();

                using (var model = new WSAssetModel())
                {
                    var assetQuery = model.Asset.Where(x => request.AssetIds.Contains(x.AssetID) && x.IsActive).AsQueryable();
                    var realEstateQuery = model.RealEstate.Where(x => request.AssetIds.Contains(x.AssetID)).AsQueryable();

                    return GetMergedResults(assetQuery, realEstateQuery, model, request.LanguageId).ToList();
                }
            }
            catch (Exception ex)
            {
                _log.ErrorFormat("An Error Occured : {0} - Inner exception - {1}", ex.Message, ex.InnerException);
                throw;
            }
        }

        [HttpPost]
        [Route("GetRealEstatesSummary")]
        public List<RealEstateSummaryResponse> GetRealEstatesSummary(GetRealEstatesSummaryRequest request)
        {
            try
            {
                if (!request.AssetIds.Any())
                    return new List<RealEstateSummaryResponse>();

                using (var model = new WSAssetModel())
                {
                    var assetQuery = model.Asset.Where(x => request.AssetIds.Contains(x.AssetID) && x.IsActive).AsQueryable();
                    var realEstateQuery = model.RealEstate.Where(x => request.AssetIds.Contains(x.AssetID)).AsQueryable();

                    var result = GetSummaryResults(assetQuery, realEstateQuery, model, request.LanguageId, request.Width, request.Height).ToList();

                    foreach (var item in result)
                    {
                        item.MainPhoto = GetAssetPhoto(new AssetPhotoRequest {  Height = request.Height, Width = request.Width, PhotoId = item.MainPhotoId, Crop = true});
                    }

                    return result;
                }
            }
            catch (Exception ex)
            {
                _log.ErrorFormat("An Error Occured : {0} - Inner exception - {1}", ex.Message, ex.InnerException);
                throw;
            }
        }

        [HttpPost]
        [Route("IncrementHitCount")]
        public bool IncrementHitCount([FromBody]string assetId)
        {
            try
            {
                var id = Convert.ToInt32(assetId);
                if (id == 0)
                    throw new ArgumentException("Provided value (" + assetId + ") is invalid.", "AssetId" );

                using (var model = new WSAssetModel())
                {
                    var asset = model.Asset.FirstOrDefault(x => x.AssetID == id);

                    if (asset != null)
                    {
                        asset.HitCount += 1;

                        model.SaveChanges();

                        return true;
                    }
                }
                return false;
            }
            catch (Exception ex)
            {
                _log.ErrorFormat("An Error Occured : {0} - Inner exception - {1}", ex.Message, ex.InnerException);
                throw;
            }
        }

        [HttpPost]
        [Route("GetAssetPhoto")]
        public byte[] GetAssetPhoto(AssetPhotoRequest request)
        {
            try
            {
                using (var model = new WSAssetModel())
                {
                    var photo = model.AssetPhoto.Where(x => x.AssetPhotoID == request.PhotoId && x.IsActive).FirstOrDefault();
                    if (photo != null)
                    {
                        return GetImage(request.Width, request.Height, Path.Combine(WebConfig.GetBaseFilePathKeyValue(), photo.FilePath), request.Crop);
                    }
                    return new byte[] { };
                }
            }
            catch (Exception ex)
            {
                _log.ErrorFormat("An Error Occured : {0} - Inner exception - {1}", ex.Message, ex.InnerException);
                return new byte[] { };
            }
        }

        [HttpPost]
        [Route("GetAssetThumbnails")]
        public List<AssetThumbnailsResponse> GetAssetThumbnails(AssetThumbnailsRequest request)
        {
            try
            {
                using (var model = new WSAssetModel())
                {
                    var photos = model.AssetPhoto.Where(x => x.AssetID == request.AssetId && x.IsActive).OrderByDescending(x=>x.IsHighlighted).ToList();
                    var response = new List<AssetThumbnailsResponse>();

                    if (photos.Any())
                    {
                        foreach (var photo in photos)
                        {
                            response.Add(new AssetThumbnailsResponse
                            {
                                PhotoId = photo.AssetPhotoID,
                                Image = GetImage(request.Width, request.Height, Path.Combine(WebConfig.GetBaseFilePathKeyValue(), photo.FilePath), true)
                            });
                        }
                        return response;
                    }
                    return response;
                }
            }
            catch (Exception ex)
            {
                _log.ErrorFormat("An Error Occured : {0} - Inner exception - {1}", ex.Message, ex.InnerException);
                return new List<AssetThumbnailsResponse>();
                //throw;
            }
        }

        [HttpPost]
        [Route("GetDocument")]
        public GetDocumentResponse GetDocument(GetDocumentRequest request)
        {
            try
            {
                using (var model = new WSAssetModel())
                {
                    var doc = model.AssetDocument.FirstOrDefault(x => x.AssetDocumentID == request.DocId && x.IsActive);
                    var response = new GetDocumentResponse();

                    if (doc != null)
                    {
                        response.Document = File.ReadAllBytes(string.Format("{0}{1}", WebConfig.GetBaseFilePathKeyValue(), doc.FilePath));
                        
                        return response;
                    }
                    return response;
                }
            }
            catch (Exception ex)
            {
                _log.ErrorFormat("An Error Occured : {0} - Inner exception - {1}", ex.Message, ex.InnerException);
                return new GetDocumentResponse();
                //throw;
            }
        }

        [HttpPost]
        [Route("GetVisitRequestInfo")]
        public VisitRequestResponse GetVisitRequestInfo(VisitRequest request)
        {
            try
            {
                using (var model = new WSAssetModel())
                {
                    
                    var response = new VisitRequestResponse();



                    var visitInfo = (from a in model.Asset
                                    from cc in model.Contact.Where(x=>x.ContactID == a.CcContactID).DefaultIfEmpty()
                                    from to in model.Contact.Where(x => x.ContactID == a.ToContactID).DefaultIfEmpty()
                                    where a.AssetID == request.AssetId
                                    select new VisitRequestResponse { CCEmail = cc.Email, Reference = a.Reference, ToEmail=to.Email })
                                    .FirstOrDefault();

                    return visitInfo;
                }
            }
            catch (Exception ex)
            {
                _log.ErrorFormat("An Error Occured : {0} - Inner exception - {1}", ex.Message, ex.InnerException);
                return new VisitRequestResponse();
                //throw;
            }
        }

        [HttpPost]
        [Route("ContactRequest")]
        public bool ContactRequest(NewContactRequest request)
        {
            try
            {
                if (request.AssetId == 0)
                    throw new ArgumentException("Provided value (" + request.AssetId + ") is invalid.", "AssetId");

                if (string.IsNullOrWhiteSpace(request.Email))
                    throw new ArgumentException("Provided value (" + request.Email + ") is invalid.", "Email");

                using (var model = new WSAssetModel())
                {
                    var asset = model.Asset.FirstOrDefault(x => x.AssetID == request.AssetId);

                    if (asset != null)
                    {
                        var checkDate = DateTime.Now.AddHours(-1);

                        var lead = model.Lead.FirstOrDefault(x => x.AssetID == request.AssetId
                                                                && x.Email == request.Email
                                                                && x.RequestDate >= checkDate);

                        if (lead == null)
                        {
                            lead = AutoMapper.Mapper.Map<Lead>(request);
                            lead.CcContactID = asset.CcContactID;
                            lead.ToContactID = asset.ToContactID;

                            model.Lead.Add(lead);

                            model.SaveChanges();
                        }

                        return true;
                    }
                    return false;
                }
            }
            catch (Exception ex)
            {
                _log.ErrorFormat("An Error Occured : {0} - Inner exception - {1}", ex.Message, ex.InnerException);
                throw;
            }
        }

        [HttpGet]
        [Route("GetAssetLocations")]
        public List<GetAssetLocationsResponse> GetAssetLocations(int languageId)
        {
            try
            {
                using (var model = new WSAssetModel())
                {
                    var returnList = new List<GetAssetLocationsResponse>();

                    var assetQuery = model.Asset.Where(x => x.IsActive).AsQueryable();
                    if (assetQuery.Any())
                    {
                        var realEstateQuery = model.RealEstate.AsQueryable();

                        var orderField = string.Empty;

                        orderField += "PublishedDate desc";

                        IQueryable<GetAssetLocationsResponse> mergedResults = GetMergedResults(assetQuery, realEstateQuery, model, languageId).OrderBy(orderField).Select(x=>new GetAssetLocationsResponse {
                            AssetId = x.AssetID,
                            Latitude = x.Latitude,
                            Longitude = x.Longitude
                        });

                        var realEstateList = mergedResults.ToList();

                        returnList = realEstateList;
                    }
                    return returnList;
                }
            }
            catch (Exception ex)
            {
                _log.ErrorFormat("An Error Occured : {0} - Inner exception - {1}", ex.Message, ex.InnerException);
                throw;
            }
        }

        [HttpPost]
        [Route("SendVisitRequestEmail")]
        public bool SendVisitRequestEmail(SendVisitRequestEmailRequest request)
        {
            try
            {
                return SendEmailCommand(request.EmailTemplate, request.To, "WSRE - Visit Request", "Whitestar Assets Visit Request", request.Cc);
            }
            catch (Exception ex)
            {
                _log.ErrorFormat("An Error Occured : {0} - Inner exception - {1}", ex.Message, ex.InnerException);
                return false;
            }
        }

        [HttpPost]
        [Route("GetPopularSearches")]
        public List<PopularSearchResponse> GetPopularSearches(PopularSearchRequest request)
        {
            try
            {
                using (var model = new WSAssetModel())
                {
                    var response = new List<PopularSearchResponse>();

                    IQueryable<PopularSearchView> query = model.PopularSearchView.Where(x => x.LanguageID == request.LanguageID);
                    query = request.DistrictID.HasValue ? query.Where(x => x.DistrictID == request.DistrictID) : query;
                    query = request.CountyID.HasValue ? query.Where(x => x.CountyID == request.CountyID) : query;
                    query = request.RealEstateTypeID.HasValue ? query.Where(x => x.RealEstateTypeID == request.RealEstateTypeID) : query;

                    List<PopularSearchView> results = query.ToList().OrderByDescending(x => x.SearchRank).Take(request.Limit).ToList();
                    if (results.Any())
                    {
                        foreach (PopularSearchView row in results)
                        {
                            response.Add(new PopularSearchResponse
                            {
                                SearchRank = row.SearchRank,
                                DistrictID = row.DistrictID,
                                District = row.District,
                                CountyID = row.CountyID,
                                County = row.County,
                                RealEstateTypeID = row.RealEstateTypeID,
                                RealEstateType = row.RealEstateType
                            });
                        }
                        return response;
                    }
                    return response;
                }
            }
            catch (Exception ex)
            {
                _log.ErrorFormat("An Error Occured : {0} - Inner exception - {1}", ex.Message, ex.InnerException);
                throw;
            }
        }

        private static IQueryable<RealEstateInformationResponse> GetMergedResults(IQueryable<Asset> assetQuery, IQueryable<RealEstate> realEstateQuery, WSAssetModel model, int languageId)
        {
            IQueryable<RealEstateInformationResponse> mergedResults;

                mergedResults = (from a in assetQuery
                                 join r in realEstateQuery on a.AssetID equals r.AssetID
                                 join rc in model.RealEstateConditionLocalized on r.RealEstateConditionID equals rc.RealEstateConditionID
                                 from rt in model.RealEstateTipologyLocalized
                                    .Where(x=>x.RealEstateTipologyID == r.RealEstateTipologyID && x.LanguageID == languageId)
                                    .DefaultIfEmpty()
                                 from cpu in model.AssetDocument
                                 .Where(x => x.AssetID == a.AssetID && x.DocumentTypeID == 1 && x.IsActive)
                                 .DefaultIfEmpty()
                                 from plant in model.AssetDocument
                                 .Where(x => x.AssetID == a.AssetID && x.DocumentTypeID == 2 && x.IsActive)
                                 .DefaultIfEmpty()
                                 join rs in model.RealEstateStatusLocalized on r.RealEstateStatusID equals rs.RealEstateStatusID
                                 join rType in model.RealEstateTypeLocalized on r.RealEstateTypeID equals rType.RealEstateTypeID
                                 from photo in model.AssetPhoto
                                 .Where(x=>x.AssetID == a.AssetID && x.IsActive && x.IsHighlighted)
                                 .DefaultIfEmpty()
                                 where rc.LanguageID == languageId 
                                 && rs.LanguageID == languageId
                                 && rType.LanguageID == languageId
                                 select new RealEstateInformationResponse
                                 {
                                     AssetID = a.AssetID,
                                     AssetTypeID = r.RealEstateTypeID,
                                     ConstructionYear = r.ConstructionYear,
                                     County = r.County.Description,
                                     CountyID = r.CountyID,
                                     CurrentPrice = a.CurrentPrice,
                                     Description = a.Description,
                                     District = r.District.Description,
                                     DistrictID = r.DistrictID,
                                     GrossBuildingArea = r.GrossBuildingArea,
                                     HasParking = r.HasParking,
                                     IsHighlighted = a.IsHighlighted,
                                     Latitude = r.Latitude,
                                     Longitude = r.Longitude,
                                     Parish = r.Parish.Description,
                                     ParishID = r.ParishID,
                                     OriginatorAssetID = a.SourceAssetID,
                                     RealEstateStatus = rs.Description,
                                     RealEstateCondition = rc.Description,
                                     RealEstateTipology = rt.Description,
                                     RealEstateType = rType.Description,
                                     Reference = a.Reference,
                                     PreviousPrice = a.PreviousPrice,
                                     ChangedPriceDate = a.PriceChangeDate,
                                     PublishedDate = a.PublishDate,
                                     HitCount = a.HitCount,
                                     EnergyCertificate = r.EnergyCertificateNumber,
                                     EnergyRating = r.RealEstateEnergyCertificate.Description,
                                     MainPhotoId = (photo == null ? 0 : photo.AssetPhotoID),
                                     Address = r.Address,
                                     ZipCode = r.ZipCode,
                                     CPUDocumentId = cpu.AssetDocumentID,
                                     PlantDocumentId = plant.AssetDocumentID
                                 });

            return mergedResults;
        }

        private static IQueryable<RealEstateSummaryResponse> GetSummaryResults(IQueryable<Asset> assetQuery, IQueryable<RealEstate> realEstateQuery, WSAssetModel model, int languageId, int imageWidth, int imageHeight)
        {
            IQueryable<RealEstateSummaryResponse> mergedResults;

            mergedResults = (from a in assetQuery
                             join r in realEstateQuery on a.AssetID equals r.AssetID
                             from rt in model.RealEstateTipologyLocalized
                                .Where(x => x.RealEstateTipologyID == r.RealEstateTipologyID && x.LanguageID == languageId)
                                .DefaultIfEmpty()
                             join rs in model.RealEstateStatusLocalized on r.RealEstateStatusID equals rs.RealEstateStatusID
                             join rType in model.RealEstateTypeLocalized on r.RealEstateTypeID equals rType.RealEstateTypeID
                             from photo in model.AssetPhoto
                             .Where(x => x.AssetID == a.AssetID && x.IsActive && x.IsHighlighted)
                             .DefaultIfEmpty()
                             where rs.LanguageID == languageId
                             && rType.LanguageID == languageId
                             select new RealEstateSummaryResponse
                             {
                                 AssetID = a.AssetID,
                                 AssetTypeID = r.RealEstateTypeID,
                                 County = r.County.Description,
                                 CurrentPrice = a.CurrentPrice,
                                 District = r.District.Description,
                                 GrossBuildingArea = r.GrossBuildingArea,
                                 Parish = r.Parish.Description,
                                 RealEstateStatus = rs.Description,
                                 RealEstateTipology = rt.Description,
                                 RealEstateType = rType.Description,
                                 PreviousPrice = a.PreviousPrice,
                                 MainPhotoId = (photo == null ? 0 : photo.AssetPhotoID),
                             });

           
            return mergedResults;
        }

        private static byte[] GetImage(int width, int height, string imagePath, bool crop)
        {
            // get original image
            Stream stream = new StreamReader(imagePath).BaseStream;
            Image originalImage = Image.FromStream(stream);
            // process missing width or height calculations for resize
            int resizeWidth = width == 0 ? ImageResizer.calculateImageWidth(originalImage, height) : width;
            int resizeHeight = height == 0 ? ImageResizer.calculateImageHeight(originalImage, width) : height;
            // resize original image with or whithout crop
            Image resizedImage;
            if (crop)
            {
                resizedImage = ImageResizer.Crop(originalImage, resizeWidth, resizeHeight, AnchorPosition.Center);
            }
            else
            {
                resizedImage = ImageResizer.FixedSize(originalImage, resizeWidth, resizeHeight);
            }
            // return new image byte array
            using (var ms = new MemoryStream())
            {
                var imageFormat = System.Drawing.Imaging.ImageFormat.Jpeg;
                resizedImage.Save(ms, imageFormat);
                return ms.ToArray();
            }
        }

        [HttpGet]
        [Route("GetAssetFeatures")]
        public List<AssetFeatureResponse> GetAssetFeatures(int assetId, int languageId)
        {
            try
            {
                using (var model = new WSAssetModel())
                {
                    List<AssetFeatureResponse> response = (
                        from t in model.RealEstate
                        join v in model.RealEstateAttributeValue on t.RealEstateID equals v.RealEstateID
                        join a in model.RealEstateAttribute on v.RealEstateAttributeID equals a.RealEstateAttributeID
                        join al in model.RealEstateAttributeLocalized on v.RealEstateAttributeID equals al.RealEstateAttributeID
                        join c in model.RealEstateAttributeCategory on a.RealEstateAttributeCategoryID equals c.RealEstateAttributeCategoryID
                        join cl in model.RealEstateAttributeCategoryLocalized on c.RealEstateAttributeCategoryID equals cl.RealEstateAttributeCategoryID
                        join dt in model.DataType on a.DataTypeID equals dt.DataTypeID
                        where al.LanguageID == languageId 
                        && cl.LanguageID == languageId
                        && t.AssetID == assetId
                        orderby c.Order ascending, a.Order ascending
                        select new AssetFeatureResponse
                        {
                            AttributeID = v.RealEstateAttributeID,
                            AttributeCategoryID = a.RealEstateAttributeCategoryID,
                            AttributeTypeID = a.DataTypeID,
                            Attribute = al.Description,
                            AttributeCategory = cl.Description,
                            AttributeType = dt.Description,
                            BoolValue = v.BoolValue,
                            TextValue = v.TextValue,
                            DateValue = v.DateValue,
                            NumberValue = v.NumberValue,
                            Unit = a.Unit,
                            Order = c.Order + ((decimal) a.Order / 100)
                        }).ToList();

                    return response;
                }
            }
            catch (Exception ex)
            {
                _log.ErrorFormat("An Error Occured : {0} - Inner exception - {1}", ex.Message, ex.InnerException);
                throw;
            }
        }
    }
}
