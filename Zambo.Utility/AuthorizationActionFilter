using System;
using System.Web.Mvc;
using Value.Site.Client.Security;
using Value.Site.Client.Security.Interfaces;

namespace Zambo.Site.Extensions
{
    public class AuthorizationActionFilter : ActionFilterAttribute
    {
        private ISecurityApiClient _infraestructureClient;

        public string ActionName { get; set; }

        public ISecurityApiClient SecurityClient
        {
            get
            {
                if (_infraestructureClient == null)
                {
                    _infraestructureClient = new SecurityApiClient();
                }

                return _infraestructureClient;
            }
        }

        public override void OnActionExecuting(ActionExecutingContext filterContext)
        {
            VerifyAuthorizationToAccess(filterContext);
        }

        private void VerifyAuthorizationToAccess(ActionExecutingContext filterContext)
        {
            if (!SessionManager.Current.IsLoged())
            {
                filterContext.Result = new RedirectToRouteResult(new RouteValueDictionary { { "action", "Index" }, { "controller", "Login" } });
            }
            else
            {
                if (!SessionManager.Current.IsPermited(ActionName))
                {
                    Type tipoRetorno = (((ReflectedActionDescriptor)(filterContext.ActionDescriptor)).MethodInfo).ReturnType;

                    if (tipoRetorno == typeof(JsonResult))
                    {
                        filterContext.Result = new HttpUnauthorizedResult();
                        filterContext.HttpContext.Response.StatusCode = 403;
                    }
                    else
                    {
                        filterContext.Controller.ViewBag.ErrorMessage = "Restrict Access! The user don't have the necessary authorization.";
                        throw new HttpAntiForgeryException("Restrict Access! The user don't have the necessary authorization.");
                    }
                }
            }
        }
    }
}
