using System.Collections.Generic;
using System.Web;
using Zambo.Domain.Models.Common.Request;
using Zambo.Domain.Models.Security.Dto;
using Zambo.Site.Client.Security;
using Zambo.Site.Client.Security.Interfaces;

public class SessionManager
    {
        private ISecurityApiClient _infraestructureClient;

        private IDictionary<string, string> cookied;

        private SessionManager()
        {
        }

        public static SessionManager Current
        {
            get
            {
                SessionManager session = (SessionManager)HttpContext.Current.Session["__SessionManager__"];

                if (session == null)
                {
                    session = new SessionManager();
                    HttpContext.Current.Session["__SessionManager__"] = session;
                }

                return session;
            }
        }

        public string AccessToken { get; private set; }

        public IDictionary<string, string> Authorizations { get; set; }

        public string UserName { get; private set; }

        public IDictionary<string, string> Cookied
        {
            get
            {
                return cookied;
            }

            set
            {
                cookied = value;
                if (cookied != null)
                {
                    SetAccessToken();
                    SetAuthorizations();
                    SetRoles();
                }
            }
        }

        public MemberShipDto[] Roles { get; set; }

        private ISecurityApiClient SecurityClient
        {
            get
            {
                if (_infraestructureClient == null)
                {
                    _infraestructureClient = new SecurityApiClient();
                }

                return _infraestructureClient;
            }
        }

        public string UserEmail { get; private set; }

        public bool IsPermited(string actionName)
        {
            bool response = false;
            if (Authorizations.ContainsKey(actionName))
            {
                response = true;
            }

            return response;
        }

        private void SetAccessToken()
        {
            AccessToken = Cookied["access_token"];
            UserName = Cookied["userName"];
            UserEmail = Cookied["userEmail"];
        }

        private void SetAuthorizations()
        {
            Authorizations = SecurityClient.GetAuthorizations(new GeneralRequest<object>() { Token = Cookied["access_token"] }).Response;
        }

        private void SetRoles()
        {
            Roles = SecurityClient.GetRoles(new GeneralRequest<object>() { Token = Cookied["access_token"] }).Response;
        }
    }
